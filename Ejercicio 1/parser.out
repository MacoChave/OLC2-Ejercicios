Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> logic_o
Rule 2     logic_o -> logic_o OR logic_a
Rule 3     logic_o -> logic_a
Rule 4     logic_a -> logic_a AND logic_n
Rule 5     logic_a -> logic_n
Rule 6     logic_n -> NOT logic_o
Rule 7     logic_n -> exp_r
Rule 8     exp_r -> exp_e MENOR exp_e
Rule 9     exp_r -> exp_e MENORIGUAL exp_e
Rule 10    exp_r -> exp_e MAYOR exp_e
Rule 11    exp_r -> exp_e MAYORIGUAL exp_e
Rule 12    exp_r -> exp_e IGUAL exp_e
Rule 13    exp_r -> exp_e NOIGUAL exp_e
Rule 14    exp_e -> exp_e MAS exp_t
Rule 15    exp_e -> exp_e MENOS exp_t
Rule 16    exp_e -> exp_t
Rule 17    exp_t -> exp_t POR exp_f
Rule 18    exp_t -> exp_t DIV exp_f
Rule 19    exp_t -> exp_f
Rule 20    exp_f -> PARI exp_e PARD
Rule 21    exp_f -> ID
Rule 22    exp_f -> NUM

Terminals, with rules where they appear

AND                  : 4
DIV                  : 18
ID                   : 21
IGUAL                : 12
MAS                  : 14
MAYOR                : 10
MAYORIGUAL           : 11
MENOR                : 8
MENORIGUAL           : 9
MENOS                : 15
NOIGUAL              : 13
NOT                  : 6
NUM                  : 22
OR                   : 2
PARD                 : 20
PARI                 : 20
POR                  : 17
error                : 

Nonterminals, with rules where they appear

exp_e                : 8 8 9 9 10 10 11 11 12 12 13 13 14 15 20
exp_f                : 17 18 19
exp_r                : 7
exp_t                : 14 15 16 17 18
logic_a              : 2 3 4
logic_n              : 4 5
logic_o              : 1 2 6
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . logic_o
    (2) logic_o -> . logic_o OR logic_a
    (3) logic_o -> . logic_a
    (4) logic_a -> . logic_a AND logic_n
    (5) logic_a -> . logic_n
    (6) logic_n -> . NOT logic_o
    (7) logic_n -> . exp_r
    (8) exp_r -> . exp_e MENOR exp_e
    (9) exp_r -> . exp_e MENORIGUAL exp_e
    (10) exp_r -> . exp_e MAYOR exp_e
    (11) exp_r -> . exp_e MAYORIGUAL exp_e
    (12) exp_r -> . exp_e IGUAL exp_e
    (13) exp_r -> . exp_e NOIGUAL exp_e
    (14) exp_e -> . exp_e MAS exp_t
    (15) exp_e -> . exp_e MENOS exp_t
    (16) exp_e -> . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    NOT             shift and go to state 5
    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    start                          shift and go to state 1
    logic_o                        shift and go to state 2
    logic_a                        shift and go to state 3
    logic_n                        shift and go to state 4
    exp_r                          shift and go to state 6
    exp_e                          shift and go to state 7
    exp_t                          shift and go to state 8
    exp_f                          shift and go to state 9

state 1

    (0) S' -> start .



state 2

    (1) start -> logic_o .
    (2) logic_o -> logic_o . OR logic_a

    $end            reduce using rule 1 (start -> logic_o .)
    OR              shift and go to state 13


state 3

    (3) logic_o -> logic_a .
    (4) logic_a -> logic_a . AND logic_n

  ! shift/reduce conflict for AND resolved as shift
    OR              reduce using rule 3 (logic_o -> logic_a .)
    $end            reduce using rule 3 (logic_o -> logic_a .)
    AND             shift and go to state 14

  ! AND             [ reduce using rule 3 (logic_o -> logic_a .) ]


state 4

    (5) logic_a -> logic_n .

    AND             reduce using rule 5 (logic_a -> logic_n .)
    OR              reduce using rule 5 (logic_a -> logic_n .)
    $end            reduce using rule 5 (logic_a -> logic_n .)


state 5

    (6) logic_n -> NOT . logic_o
    (2) logic_o -> . logic_o OR logic_a
    (3) logic_o -> . logic_a
    (4) logic_a -> . logic_a AND logic_n
    (5) logic_a -> . logic_n
    (6) logic_n -> . NOT logic_o
    (7) logic_n -> . exp_r
    (8) exp_r -> . exp_e MENOR exp_e
    (9) exp_r -> . exp_e MENORIGUAL exp_e
    (10) exp_r -> . exp_e MAYOR exp_e
    (11) exp_r -> . exp_e MAYORIGUAL exp_e
    (12) exp_r -> . exp_e IGUAL exp_e
    (13) exp_r -> . exp_e NOIGUAL exp_e
    (14) exp_e -> . exp_e MAS exp_t
    (15) exp_e -> . exp_e MENOS exp_t
    (16) exp_e -> . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    NOT             shift and go to state 5
    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    logic_o                        shift and go to state 15
    logic_a                        shift and go to state 3
    logic_n                        shift and go to state 4
    exp_r                          shift and go to state 6
    exp_e                          shift and go to state 7
    exp_t                          shift and go to state 8
    exp_f                          shift and go to state 9

state 6

    (7) logic_n -> exp_r .

    AND             reduce using rule 7 (logic_n -> exp_r .)
    OR              reduce using rule 7 (logic_n -> exp_r .)
    $end            reduce using rule 7 (logic_n -> exp_r .)


state 7

    (8) exp_r -> exp_e . MENOR exp_e
    (9) exp_r -> exp_e . MENORIGUAL exp_e
    (10) exp_r -> exp_e . MAYOR exp_e
    (11) exp_r -> exp_e . MAYORIGUAL exp_e
    (12) exp_r -> exp_e . IGUAL exp_e
    (13) exp_r -> exp_e . NOIGUAL exp_e
    (14) exp_e -> exp_e . MAS exp_t
    (15) exp_e -> exp_e . MENOS exp_t

    MENOR           shift and go to state 16
    MENORIGUAL      shift and go to state 17
    MAYOR           shift and go to state 18
    MAYORIGUAL      shift and go to state 19
    IGUAL           shift and go to state 20
    NOIGUAL         shift and go to state 21
    MAS             shift and go to state 22
    MENOS           shift and go to state 23


state 8

    (16) exp_e -> exp_t .
    (17) exp_t -> exp_t . POR exp_f
    (18) exp_t -> exp_t . DIV exp_f

    MENOR           reduce using rule 16 (exp_e -> exp_t .)
    MENORIGUAL      reduce using rule 16 (exp_e -> exp_t .)
    MAYOR           reduce using rule 16 (exp_e -> exp_t .)
    MAYORIGUAL      reduce using rule 16 (exp_e -> exp_t .)
    IGUAL           reduce using rule 16 (exp_e -> exp_t .)
    NOIGUAL         reduce using rule 16 (exp_e -> exp_t .)
    MAS             reduce using rule 16 (exp_e -> exp_t .)
    MENOS           reduce using rule 16 (exp_e -> exp_t .)
    PARD            reduce using rule 16 (exp_e -> exp_t .)
    AND             reduce using rule 16 (exp_e -> exp_t .)
    OR              reduce using rule 16 (exp_e -> exp_t .)
    $end            reduce using rule 16 (exp_e -> exp_t .)
    POR             shift and go to state 24
    DIV             shift and go to state 25


state 9

    (19) exp_t -> exp_f .

    POR             reduce using rule 19 (exp_t -> exp_f .)
    DIV             reduce using rule 19 (exp_t -> exp_f .)
    MENOR           reduce using rule 19 (exp_t -> exp_f .)
    MENORIGUAL      reduce using rule 19 (exp_t -> exp_f .)
    MAYOR           reduce using rule 19 (exp_t -> exp_f .)
    MAYORIGUAL      reduce using rule 19 (exp_t -> exp_f .)
    IGUAL           reduce using rule 19 (exp_t -> exp_f .)
    NOIGUAL         reduce using rule 19 (exp_t -> exp_f .)
    MAS             reduce using rule 19 (exp_t -> exp_f .)
    MENOS           reduce using rule 19 (exp_t -> exp_f .)
    PARD            reduce using rule 19 (exp_t -> exp_f .)
    AND             reduce using rule 19 (exp_t -> exp_f .)
    OR              reduce using rule 19 (exp_t -> exp_f .)
    $end            reduce using rule 19 (exp_t -> exp_f .)


state 10

    (20) exp_f -> PARI . exp_e PARD
    (14) exp_e -> . exp_e MAS exp_t
    (15) exp_e -> . exp_e MENOS exp_t
    (16) exp_e -> . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    exp_e                          shift and go to state 26
    exp_t                          shift and go to state 8
    exp_f                          shift and go to state 9

state 11

    (21) exp_f -> ID .

    POR             reduce using rule 21 (exp_f -> ID .)
    DIV             reduce using rule 21 (exp_f -> ID .)
    MENOR           reduce using rule 21 (exp_f -> ID .)
    MENORIGUAL      reduce using rule 21 (exp_f -> ID .)
    MAYOR           reduce using rule 21 (exp_f -> ID .)
    MAYORIGUAL      reduce using rule 21 (exp_f -> ID .)
    IGUAL           reduce using rule 21 (exp_f -> ID .)
    NOIGUAL         reduce using rule 21 (exp_f -> ID .)
    MAS             reduce using rule 21 (exp_f -> ID .)
    MENOS           reduce using rule 21 (exp_f -> ID .)
    PARD            reduce using rule 21 (exp_f -> ID .)
    AND             reduce using rule 21 (exp_f -> ID .)
    OR              reduce using rule 21 (exp_f -> ID .)
    $end            reduce using rule 21 (exp_f -> ID .)


state 12

    (22) exp_f -> NUM .

    POR             reduce using rule 22 (exp_f -> NUM .)
    DIV             reduce using rule 22 (exp_f -> NUM .)
    MENOR           reduce using rule 22 (exp_f -> NUM .)
    MENORIGUAL      reduce using rule 22 (exp_f -> NUM .)
    MAYOR           reduce using rule 22 (exp_f -> NUM .)
    MAYORIGUAL      reduce using rule 22 (exp_f -> NUM .)
    IGUAL           reduce using rule 22 (exp_f -> NUM .)
    NOIGUAL         reduce using rule 22 (exp_f -> NUM .)
    MAS             reduce using rule 22 (exp_f -> NUM .)
    MENOS           reduce using rule 22 (exp_f -> NUM .)
    PARD            reduce using rule 22 (exp_f -> NUM .)
    AND             reduce using rule 22 (exp_f -> NUM .)
    OR              reduce using rule 22 (exp_f -> NUM .)
    $end            reduce using rule 22 (exp_f -> NUM .)


state 13

    (2) logic_o -> logic_o OR . logic_a
    (4) logic_a -> . logic_a AND logic_n
    (5) logic_a -> . logic_n
    (6) logic_n -> . NOT logic_o
    (7) logic_n -> . exp_r
    (8) exp_r -> . exp_e MENOR exp_e
    (9) exp_r -> . exp_e MENORIGUAL exp_e
    (10) exp_r -> . exp_e MAYOR exp_e
    (11) exp_r -> . exp_e MAYORIGUAL exp_e
    (12) exp_r -> . exp_e IGUAL exp_e
    (13) exp_r -> . exp_e NOIGUAL exp_e
    (14) exp_e -> . exp_e MAS exp_t
    (15) exp_e -> . exp_e MENOS exp_t
    (16) exp_e -> . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    NOT             shift and go to state 5
    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    logic_a                        shift and go to state 27
    logic_n                        shift and go to state 4
    exp_r                          shift and go to state 6
    exp_e                          shift and go to state 7
    exp_t                          shift and go to state 8
    exp_f                          shift and go to state 9

state 14

    (4) logic_a -> logic_a AND . logic_n
    (6) logic_n -> . NOT logic_o
    (7) logic_n -> . exp_r
    (8) exp_r -> . exp_e MENOR exp_e
    (9) exp_r -> . exp_e MENORIGUAL exp_e
    (10) exp_r -> . exp_e MAYOR exp_e
    (11) exp_r -> . exp_e MAYORIGUAL exp_e
    (12) exp_r -> . exp_e IGUAL exp_e
    (13) exp_r -> . exp_e NOIGUAL exp_e
    (14) exp_e -> . exp_e MAS exp_t
    (15) exp_e -> . exp_e MENOS exp_t
    (16) exp_e -> . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    NOT             shift and go to state 5
    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    logic_n                        shift and go to state 28
    exp_r                          shift and go to state 6
    exp_e                          shift and go to state 7
    exp_t                          shift and go to state 8
    exp_f                          shift and go to state 9

state 15

    (6) logic_n -> NOT logic_o .
    (2) logic_o -> logic_o . OR logic_a

    AND             reduce using rule 6 (logic_n -> NOT logic_o .)
    OR              reduce using rule 6 (logic_n -> NOT logic_o .)
    $end            reduce using rule 6 (logic_n -> NOT logic_o .)

  ! OR              [ shift and go to state 13 ]


state 16

    (8) exp_r -> exp_e MENOR . exp_e
    (14) exp_e -> . exp_e MAS exp_t
    (15) exp_e -> . exp_e MENOS exp_t
    (16) exp_e -> . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    exp_e                          shift and go to state 29
    exp_t                          shift and go to state 8
    exp_f                          shift and go to state 9

state 17

    (9) exp_r -> exp_e MENORIGUAL . exp_e
    (14) exp_e -> . exp_e MAS exp_t
    (15) exp_e -> . exp_e MENOS exp_t
    (16) exp_e -> . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    exp_e                          shift and go to state 30
    exp_t                          shift and go to state 8
    exp_f                          shift and go to state 9

state 18

    (10) exp_r -> exp_e MAYOR . exp_e
    (14) exp_e -> . exp_e MAS exp_t
    (15) exp_e -> . exp_e MENOS exp_t
    (16) exp_e -> . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    exp_e                          shift and go to state 31
    exp_t                          shift and go to state 8
    exp_f                          shift and go to state 9

state 19

    (11) exp_r -> exp_e MAYORIGUAL . exp_e
    (14) exp_e -> . exp_e MAS exp_t
    (15) exp_e -> . exp_e MENOS exp_t
    (16) exp_e -> . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    exp_e                          shift and go to state 32
    exp_t                          shift and go to state 8
    exp_f                          shift and go to state 9

state 20

    (12) exp_r -> exp_e IGUAL . exp_e
    (14) exp_e -> . exp_e MAS exp_t
    (15) exp_e -> . exp_e MENOS exp_t
    (16) exp_e -> . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    exp_e                          shift and go to state 33
    exp_t                          shift and go to state 8
    exp_f                          shift and go to state 9

state 21

    (13) exp_r -> exp_e NOIGUAL . exp_e
    (14) exp_e -> . exp_e MAS exp_t
    (15) exp_e -> . exp_e MENOS exp_t
    (16) exp_e -> . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    exp_e                          shift and go to state 34
    exp_t                          shift and go to state 8
    exp_f                          shift and go to state 9

state 22

    (14) exp_e -> exp_e MAS . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    exp_t                          shift and go to state 35
    exp_f                          shift and go to state 9

state 23

    (15) exp_e -> exp_e MENOS . exp_t
    (17) exp_t -> . exp_t POR exp_f
    (18) exp_t -> . exp_t DIV exp_f
    (19) exp_t -> . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    exp_t                          shift and go to state 36
    exp_f                          shift and go to state 9

state 24

    (17) exp_t -> exp_t POR . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    exp_f                          shift and go to state 37

state 25

    (18) exp_t -> exp_t DIV . exp_f
    (20) exp_f -> . PARI exp_e PARD
    (21) exp_f -> . ID
    (22) exp_f -> . NUM

    PARI            shift and go to state 10
    ID              shift and go to state 11
    NUM             shift and go to state 12

    exp_f                          shift and go to state 38

state 26

    (20) exp_f -> PARI exp_e . PARD
    (14) exp_e -> exp_e . MAS exp_t
    (15) exp_e -> exp_e . MENOS exp_t

    PARD            shift and go to state 39
    MAS             shift and go to state 22
    MENOS           shift and go to state 23


state 27

    (2) logic_o -> logic_o OR logic_a .
    (4) logic_a -> logic_a . AND logic_n

    OR              reduce using rule 2 (logic_o -> logic_o OR logic_a .)
    $end            reduce using rule 2 (logic_o -> logic_o OR logic_a .)
    AND             shift and go to state 14

  ! AND             [ reduce using rule 2 (logic_o -> logic_o OR logic_a .) ]


state 28

    (4) logic_a -> logic_a AND logic_n .

    AND             reduce using rule 4 (logic_a -> logic_a AND logic_n .)
    OR              reduce using rule 4 (logic_a -> logic_a AND logic_n .)
    $end            reduce using rule 4 (logic_a -> logic_a AND logic_n .)


state 29

    (8) exp_r -> exp_e MENOR exp_e .
    (14) exp_e -> exp_e . MAS exp_t
    (15) exp_e -> exp_e . MENOS exp_t

    AND             reduce using rule 8 (exp_r -> exp_e MENOR exp_e .)
    OR              reduce using rule 8 (exp_r -> exp_e MENOR exp_e .)
    $end            reduce using rule 8 (exp_r -> exp_e MENOR exp_e .)
    MAS             shift and go to state 22
    MENOS           shift and go to state 23


state 30

    (9) exp_r -> exp_e MENORIGUAL exp_e .
    (14) exp_e -> exp_e . MAS exp_t
    (15) exp_e -> exp_e . MENOS exp_t

    AND             reduce using rule 9 (exp_r -> exp_e MENORIGUAL exp_e .)
    OR              reduce using rule 9 (exp_r -> exp_e MENORIGUAL exp_e .)
    $end            reduce using rule 9 (exp_r -> exp_e MENORIGUAL exp_e .)
    MAS             shift and go to state 22
    MENOS           shift and go to state 23


state 31

    (10) exp_r -> exp_e MAYOR exp_e .
    (14) exp_e -> exp_e . MAS exp_t
    (15) exp_e -> exp_e . MENOS exp_t

    AND             reduce using rule 10 (exp_r -> exp_e MAYOR exp_e .)
    OR              reduce using rule 10 (exp_r -> exp_e MAYOR exp_e .)
    $end            reduce using rule 10 (exp_r -> exp_e MAYOR exp_e .)
    MAS             shift and go to state 22
    MENOS           shift and go to state 23


state 32

    (11) exp_r -> exp_e MAYORIGUAL exp_e .
    (14) exp_e -> exp_e . MAS exp_t
    (15) exp_e -> exp_e . MENOS exp_t

    AND             reduce using rule 11 (exp_r -> exp_e MAYORIGUAL exp_e .)
    OR              reduce using rule 11 (exp_r -> exp_e MAYORIGUAL exp_e .)
    $end            reduce using rule 11 (exp_r -> exp_e MAYORIGUAL exp_e .)
    MAS             shift and go to state 22
    MENOS           shift and go to state 23


state 33

    (12) exp_r -> exp_e IGUAL exp_e .
    (14) exp_e -> exp_e . MAS exp_t
    (15) exp_e -> exp_e . MENOS exp_t

    AND             reduce using rule 12 (exp_r -> exp_e IGUAL exp_e .)
    OR              reduce using rule 12 (exp_r -> exp_e IGUAL exp_e .)
    $end            reduce using rule 12 (exp_r -> exp_e IGUAL exp_e .)
    MAS             shift and go to state 22
    MENOS           shift and go to state 23


state 34

    (13) exp_r -> exp_e NOIGUAL exp_e .
    (14) exp_e -> exp_e . MAS exp_t
    (15) exp_e -> exp_e . MENOS exp_t

    AND             reduce using rule 13 (exp_r -> exp_e NOIGUAL exp_e .)
    OR              reduce using rule 13 (exp_r -> exp_e NOIGUAL exp_e .)
    $end            reduce using rule 13 (exp_r -> exp_e NOIGUAL exp_e .)
    MAS             shift and go to state 22
    MENOS           shift and go to state 23


state 35

    (14) exp_e -> exp_e MAS exp_t .
    (17) exp_t -> exp_t . POR exp_f
    (18) exp_t -> exp_t . DIV exp_f

    MENOR           reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    MENORIGUAL      reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    MAYOR           reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    MAYORIGUAL      reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    IGUAL           reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    NOIGUAL         reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    MAS             reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    MENOS           reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    PARD            reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    AND             reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    OR              reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    $end            reduce using rule 14 (exp_e -> exp_e MAS exp_t .)
    POR             shift and go to state 24
    DIV             shift and go to state 25


state 36

    (15) exp_e -> exp_e MENOS exp_t .
    (17) exp_t -> exp_t . POR exp_f
    (18) exp_t -> exp_t . DIV exp_f

    MENOR           reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    MENORIGUAL      reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    MAYOR           reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    MAYORIGUAL      reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    IGUAL           reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    NOIGUAL         reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    MAS             reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    MENOS           reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    PARD            reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    AND             reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    OR              reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    $end            reduce using rule 15 (exp_e -> exp_e MENOS exp_t .)
    POR             shift and go to state 24
    DIV             shift and go to state 25


state 37

    (17) exp_t -> exp_t POR exp_f .

    POR             reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    DIV             reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    MENOR           reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    MENORIGUAL      reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    MAYOR           reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    MAYORIGUAL      reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    IGUAL           reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    NOIGUAL         reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    MAS             reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    MENOS           reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    PARD            reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    AND             reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    OR              reduce using rule 17 (exp_t -> exp_t POR exp_f .)
    $end            reduce using rule 17 (exp_t -> exp_t POR exp_f .)


state 38

    (18) exp_t -> exp_t DIV exp_f .

    POR             reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    DIV             reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    MENOR           reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    MENORIGUAL      reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    MAYOR           reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    MAYORIGUAL      reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    IGUAL           reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    NOIGUAL         reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    MAS             reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    MENOS           reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    PARD            reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    AND             reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    OR              reduce using rule 18 (exp_t -> exp_t DIV exp_f .)
    $end            reduce using rule 18 (exp_t -> exp_t DIV exp_f .)


state 39

    (20) exp_f -> PARI exp_e PARD .

    POR             reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    DIV             reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    MENOR           reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    MENORIGUAL      reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    MAYOR           reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    MAYORIGUAL      reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    IGUAL           reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    NOIGUAL         reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    MAS             reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    MENOS           reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    PARD            reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    AND             reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    OR              reduce using rule 20 (exp_f -> PARI exp_e PARD .)
    $end            reduce using rule 20 (exp_f -> PARI exp_e PARD .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 3 resolved as shift
